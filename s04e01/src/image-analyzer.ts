import { OpenAI } from 'openai';
import * as fs from 'node:fs';
import * as path from 'node:path';

interface PersonDescription {
    generalAppearance: string;
    similarities: string[];
    differences: string[];
    confidence: number;
}

export class PersonImageAnalyzer {
    private openai: OpenAI;

    constructor(apiKey: string) {
        this.openai = new OpenAI({ apiKey });
        console.log('üöÄ Inicjalizacja analizatora obraz√≥w...');
    }

    async analyzeImages(imageDirectory: string): Promise<string> {
        console.log(`\nüìÅ Skanowanie katalogu: ${imageDirectory}`);
        
        const imageFiles = fs.readdirSync(imageDirectory)
            .filter(file => /\.(jpg|jpeg|png)$/i.test(file));
        
        console.log(`üì∏ Znaleziono ${imageFiles.length} zdjƒôƒá do analizy\n`);

        // Wczytaj wszystkie zdjƒôcia do bufora
        const imageBuffers = imageFiles.map(file => {
            const imagePath = path.join(imageDirectory, file);
            return fs.readFileSync(imagePath);
        });

        try {
            console.log('‚è≥ Analizowanie i por√≥wnywanie wszystkich zdjƒôƒá...');
            const analysis = await this.compareImages(imageBuffers);
            
            // Zapisz wynik do pliku
            const outputDir = './rysopisy';
            if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
            }
            
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filePath = path.join(outputDir, `analiza_porownawcza_${timestamp}.txt`);
            await fs.promises.writeFile(filePath, analysis, 'utf-8');
            
            console.log(`üìù Zapisano analizƒô do pliku: analiza_porownawcza_${timestamp}.txt`);
            
            return analysis;
        } catch (error) {
            console.error('‚ùå B≈ÇƒÖd podczas analizy:', error);
            throw error;
        }
    }

    private async compareImages(imageBuffers: Buffer[]): Promise<string> {
        const response = await this.openai.chat.completions.create({
            model: "gpt-4o",
            messages: [
                {
                    role: "user",
                    content: [
                        {
                            type: "text",
                            text: `Przeanalizuj dok≈Çadnie dostarczone zdjƒôcia. Na ka≈ºdym z nich znajduje siƒô ta sama osoba. Opisz tƒô osobƒô szczeg√≥≈Çowo, uwzglƒôdniajƒÖc:

1. P≈Çeƒá i przybli≈ºony wiek
2. Kolor oczu i w≈Ços√≥w
3. Fryzurƒô i styl w≈Ços√≥w
4. Kszta≈Çt twarzy i charakterystyczne cechy (np. kszta≈Çt nosa, ust, brwi)
5. Budowƒô cia≈Ça i przybli≈ºony wzrost
6. Widoczne znaki szczeg√≥lne (np. pieprzyki, blizny, tatua≈ºe)
7. Styl ubierania siƒô, je≈õli jest charakterystyczny

Opisz tƒô osobƒô w formie ciƒÖg≈Çego tekstu po polsku, jakby≈õ opisywa≈Ç jƒÖ komu≈õ, kto jej nie widzia≈Ç. Skup siƒô na cechach, kt√≥re powtarzajƒÖ siƒô na wszystkich zdjƒôciach.`
                        },
                        ...imageBuffers.map(buffer => ({
                            type: "image_url",
                            image_url: {
                                url: `data:image/jpeg;base64,${buffer.toString('base64')}`,
                                detail: "high"
                            }
                        } as const))
                    ]
                }
            ],
            max_tokens: 1500
        });

        return response.choices[0].message.content ?? 'Nie uda≈Ço siƒô wygenerowaƒá opisu.';
    }
} 